// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Enum_TransactionType {
  Income
  Expense
}

enum Enum_RoleName {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id   String        @id @default(cuid())
  name Enum_RoleName @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified DateTime?
  image         String?
  transactions  Transaction[]
  bankAccounts  BankAccount[]
  accounts      Account[]
  sessions      Session[]
  roles         Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String               @id @default(cuid())
  amount        Float
  type          Enum_TransactionType
  date          DateTime
  concept       String
  user          User                 @relation(fields: [userId], references: [id])
  userId        String
  bankAccount   BankAccount          @relation(fields: [bankAccountId], references: [id])
  bankAccountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  id           String        @id @default(cuid())
  name         String
  description  String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
